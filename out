sat
((txn0 (tx "A" (amount t1 6.0) (amount t0 3.0))))
((queue0 nil))
((queue1 (let ((a!1 (store ((as const (Array Token (Maybe Amm))) nothing)
                  t1
                  (just (amm (amount t1 18.0) (amount t2 8.0)))))
      (a!3 (store ((as const (Array Token (Maybe Amm))) nothing)
                  t2
                  (just (amm (amount t1 18.0) (amount t2 8.0)))))
      (a!6 (store ((as const (Array Token (Maybe Amm))) nothing)
                  t2
                  (just (amm (amount t2 12.0) (amount t0 12.0)))))
      (a!8 (store (store (store ((as const (Array Token Real)) 0.0) t2 6.0)
                         t0
                         4.0)
                  t1
                  (- 6.0)))
      (a!10 ((as const (Array Token (Maybe Amm)))
              (just (amm (amount t0 21.0) (amount t1 (- 6.0))))))
      (a!11 ((as const (Array Token (Maybe Amm)))
              (just (amm (amount t0 19.0) (amount t1 (- 6.0))))))
      (a!13 ((as const (Array Token (Maybe Amm)))
              (just (amm (amount t0 20.0) (amount t1 (- 6.0))))))
      (a!14 ((as const (Array Token (Maybe Amm)))
              (just (amm (amount t0 17.0) (amount t1 (- 6.0)))))))
(let ((a!2 (store a!1 t0 (just (amm (amount t2 12.0) (amount t0 12.0)))))
      (a!4 (store a!3 t0 (just (amm (amount t1 18.0) (amount t0 8.0)))))
      (a!7 (store a!6 t1 (just (amm (amount t1 18.0) (amount t0 8.0)))))
      (a!12 (store a!11 t0 (just (amm (amount t0 7.0) (amount t0 5.0)))))
      (a!15 (store a!14 t0 (just (amm (amount t0 13.0) (amount t0 11.0))))))
(let ((a!5 (store (store ((as const (Array Token (Array Token (Maybe Amm))))
                           ((as const (Array Token (Maybe Amm))) nothing))
                         t2
                         a!2)
                  t1
                  a!4))
      (a!16 (store (store (store ((as const
                                      (Array Token (Array Token (Maybe Amm))))
                                   a!10)
                                 t2
                                 a!12)
                          t1
                          (store a!13 t0 nothing))
                   t0
                   a!15)))
(let ((a!9 (pair (store a!5 t0 a!7)
                 (store ((as const (Array String (Array Token Real)))
                          ((as const (Array Token Real)) 0.0))
                        "A"
                        a!8)))
      (a!17 (pair a!16
                  (store ((as const (Array String (Array Token Real)))
                           ((as const (Array Token Real)) 25.0))
                         ""
                         (store ((as const (Array Token Real)) 23.0) t0 22.0)))))
(let ((a!18 (triple a!17
                    a!9
                    (insert (tx "A" (amount t1 6.0) (amount t0 3.0)) nil))))
  (q (ite (forall ((uname String) (tau Token))
            (let ((a!1 (select (store (store ((as const (Array Token Real))
                                               (- (/ 1.0 9.0)))
                                             t2
                                             4.0)
                                      t0
                                      (/ 2.0 9.0))
                               tau)))
            (let ((a!2 (ite (= "" uname)
                            (ite (= t0 tau) (/ 1.0 9.0) 24.0)
                            (ite (= "A" uname)
                                 (ite (= t1 tau) (/ 55.0 9.0) a!1)
                                 27.0))))
              (>= a!2 0.0))))
          (triple a!9 a!9 nil)
          a!18)))))))))
